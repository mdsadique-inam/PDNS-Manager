package services

import extensions.process
import io.ktor.client.*
import io.ktor.client.plugins.resources.*
import io.ktor.client.request.*
import models.TSIGKey
import models.TSIGKeyBody
import resources.TSIGKeys

class TSIGKeyService(private val client: HttpClient) {

    /**
     * Get all TSIGKeys on the server, except the actual key
     *
     * Responses:
     * * 200 OK – List of TSIGKey objects Returns: array of [models.TSIGKey] objects
     * * 400 Bad Request – The supplied request was not valid Returns: [models.Error] object
     * * 404 Not Found – Requested item was not found Returns: [models.Error] object
     * * 422 Unprocessable Entity – The input to the operation was not valid Returns: [models.Error] object
     * * 500 Internal Server Error – Internal server error Returns: [models.Error] object
     *
     * @param serverId The ID of the server to retrieve TSIGKeys from.
     * @return [Result] with [List] of [TSIGKey] on success or [Throwable] on failure.
     */
    suspend fun fetchTSIGKeys(serverId: String): Result<List<TSIGKey>> = runCatching {
        val response = client.get(TSIGKeys(serverId))
        return response.process()
    }

    /**
     * Add a TSIG key
     *
     * This method adds a new TSIGKey. The actual key can be generated by the server or be provided by the client.
     *
     * Responses:
     * * 201 Created – Created Returns: [models.TSIGKey] object
     * * 400 Bad Request – The supplied request was not valid Returns: [models.Error] object
     * * 404 Not Found – Requested item was not found Returns: [models.Error] object
     * * 409 Conflict – An item with this name already exists Returns: [models.Error] object
     * * 422 Unprocessable Entity – The input to the operation was not valid Returns: [models.Error] object
     * * 500 Internal Server Error – Internal server error Returns: [models.Error] object
     *
     * @param serverId The ID of the server to create the TSIGKey on.
     * @param body The [TSIGKeyBody] to create.
     */
    suspend fun createTSIGKey(serverId: String, body: TSIGKeyBody): Result<TSIGKey> = runCatching {
        val response = client.post(TSIGKeys(serverId)) {
            setBody(body)
        }
        return response.process()
    }

    /**
     * Get a specific TSIGKeys on the server, including the actual key
     *
     * Responses:
     * * 200 OK – OK. Returns: [models.TSIGKey] object
     * * 400 Bad Request – The supplied request was not valid Returns: [models.Error] object
     * * 404 Not Found – Requested item was not found Returns: [models.Error] object
     * * 422 Unprocessable Entity – The input to the operation was not valid Returns: [models.Error] object
     * * 500 Internal Server Error – Internal server error Returns: [models.Error] object
     *
     * @param serverId The ID of the server to retrieve the TSIGKey from.
     * @param tsigKeyId The ID of the TSIGKey to retrieve.
     * @return [Result] with [TSIGKey] on success or [Throwable] on failure.
     */
    suspend fun fetchTSIGKey(serverId: String, tsigKeyId: String): Result<TSIGKey> = runCatching {
        val response = client.get(TSIGKeys.Id(serverId, tsigKeyId))
        return response.process()
    }

    /**
     * The TSIGKey at tsigKeyId can be changed in multiple ways:
     * * Changing the Name, this will remove the key with tsigKeyId after adding.
     * * Changing the Algorithm
     * * Changing the Key
     *
     * Only the relevant fields have to be provided in the request body.
     *
     * Responses:
     * * 200 OK – OK. TSIGKey is changed. Returns: [models.TSIGKey] object
     * * 400 Bad Request – The supplied request was not valid Returns: [models.Error] object
     * * 404 Not Found – Requested item was not found Returns: [models.Error] object
     * * 409 Conflict – An item with this name already exists Returns: [models.Error] object
     * * 422 Unprocessable Entity – The input to the operation was not valid Returns: [models.Error] object
     * * 500 Internal Server Error – Internal server error Returns: [models.Error] object
     *
     * @param serverId The ID of the server to update the TSIGKey on.
     * @param tsigKeyId The ID of the TSIGKey to update.
     * @param body The [TSIGKeyBody] to update.
     */
    suspend fun updateTSIGKey(serverId: String, tsigKeyId: String, body: TSIGKeyBody): Result<TSIGKey> = runCatching {
        val response = client.put(TSIGKeys.Id(serverId, tsigKeyId)) {
            setBody(body)
        }
        return response.process()
    }

    /**
     * Delete the TSIGKey with tsigKeyId
     *
     * Responses:
     * * 204 No Content – OK, key was deleted
     * * 400 Bad Request – The supplied request was not valid Returns: [models.Error] object
     * * 404 Not Found – Requested item was not found Returns: [models.Error] object
     * * 422 Unprocessable Entity – The input to the operation was not valid Returns: [models.Error] object
     * * 500 Internal Server Error – Internal server error Returns: [models.Error] object
     *
     * @param serverId The ID of the server to delete the TSIGKey from.
     * @param tsigKeyId The ID of the TSIGKey to delete.
     */
    suspend fun deleteTSIGKey(serverId: String, tsigKeyId: String): Result<Unit> = runCatching {
        val response = client.delete(TSIGKeys.Id(serverId, tsigKeyId))
        return response.process()
    }
}